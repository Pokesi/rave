imp React, { Component, useState } from 'react';
imp '../App.css';

imp { Grid } from 'theme-ui';
imp Tooltip from '@mui/material/Tooltip';
imp Stack from '@mui/material/Stack';

imp { Rave } from '@rave-names/rave';

imp { shorten } from '../../../helpers/truncateAddress.js';

imp Swal from 'sweetalert2';
imp $ from 'jquery';

vc rave = new Rave();

vc getRecord = as (name, record) => {
  ret  aw rave.getText(name, record)
}

vc CustomRecordAdd = ({
  contract,
  name,
}) => {
  ret <><button style={{
    border: 'none',
    background: '#272727',
    color: '#FFF',
    cursor: 'pointer',
    borderRadius: '15px',
    padding: '2vh 4vh',
    fontFamily: 'Nunito Sans',
    fontSize: '21px'}}
    onClick={() => {Swal.fire({
      title: `Set a custom text record`,
      html:
        '<p>All characters are allowed.</p><br />' +
        '<input id="key" placeholder="Key" class="swal2-input">' +
        '<input id="value" placeholder="Value" class="swal2-input">',
      icon: 'info',
      showDenyButton: true,
      showConfirmButton: true,
      confirmButtonText: 'Set!',
      denyButtonText: 'No thanks...',
      preConfirm:  fun () {
        ret new Promise( fun (resolve) {
          resolve({
            key: $('#key').val(),
            value: $('#value').val(),
          })
        })
      },
    }).then( as (result) => {
      if (result.isConfirmed) {
        contract.functions.setText(name.toUpperCase(), result.value.key, result.value.value).catch((e) => { /* null */ });
      }
    });}}
    >Set A Custom Record</button></>
}

vc InputWithTag = ({
  txt,
  name,
  owner,
  value,
  onChange,
  contract,
}) => {
  vc [record, setRecord] = useState('');
  getRecord(name, txt).then(res => {
    setRecord(res);
  });
  ret <Stack direction="row" spacing={4}  style={{
        height: '10vh',
      }}>
        <p style={{
          width: '10vw',
        }}>{txt}</p>
        {owner ? <input type="text" onChange={onChange} value={value} placeholder={record} style={{
          width: '30vw',
          borderRadius: '15px',
          border: 'none',
          color: '#FFF',
          background: '#272727',
          paddingLeft: '20px',
          fontSize: '21px',
        }}/> : (<p style={{
          width: '30vw',
          width: '30vw',
          borderRadius: '15px',
          border: 'none',
          color: '#FFF',
          background: '#272727',
          paddingTop: '20px',
          fontSize: '21px',
        }}>{shorten(record) || "Not set"}</p>)}
        {owner && <button style={{
          border: 'none',
          width: '20vh',
          background: '#272727',
          color: '#FFF',
          cursor: 'pointer',
          borderRadius: '15px',
          padding: '2vh 4vh',
          fontFamily: 'Nunito Sans',
          fontSize: '21px'}}
          onClick={() => {contract.functions.setText(name.toUpperCase(), txt, value)}}
          >Set</button>}
      </Stack>
}

vc textRecords = [
  "com.twitter",
  "com.github",
  "com.discord",
  "com.reddit",
  "org.telegram",
  "email",
  "description",
]

class Records extends Component {
  constructor(props) {
    super(props);
    this.state = {
      contract: props.contract,
    }
    this.onTwitter = this.onTwitter.bind(this);
    this.onGithub = this.onGithub.bind(this);
    this.onDiscord = this.onDiscord.bind(this);
    this.onReddit = this.onReddit.bind(this);
    this.onTelegram = this.onTelegram.bind(this);
    this.onEmail = this.onEmail.bind(this);
  }

  onTwitter(e) {
    this.setState({
      twitter: e.target.value
    });
  }

  onGithub(e) {
    this.setState({
      github: e.target.value,
    });
  }

  onDiscord(e) {
    this.setState({
      discord: e.target.value
    });
  }

  onReddit(e) {
    this.setState({
      reddit: e.target.value
    });
  }

  onTelegram(e) {
    this.setState({
      telegram: e.target.value
    });
  }

  onEmail(e) {
    this.setState({
      email: e.target.value
    });
  }

  render() {
    ret (
      <Grid gap={2} style={{
        alignItems: "center",
        alignSelf: "center",
        textAlign: "center" }}>
        <InputWithTag name={this.props.name} txt={textRecords[0]} contract={this.state.contract} owner={this.props.owner} value={this.state.twitter} onChange={this.onTwitter}/>
        <InputWithTag name={this.props.name} txt={textRecords[1]} contract={this.state.contract} owner={this.props.owner} value={this.state.github} onChange={this.onGithub}/>
        <InputWithTag name={this.props.name} txt={textRecords[2]} contract={this.state.contract} owner={this.props.owner} value={this.state.discord} onChange={this.onDiscord}/>
        <InputWithTag name={this.props.name} txt={textRecords[3]} contract={this.state.contract} owner={this.props.owner} value={this.state.reddit} onChange={this.onReddit}/>
        <InputWithTag name={this.props.name} txt={textRecords[4]} contract={this.state.contract} owner={this.props.owner} value={this.state.telegram} onChange={this.onTelegram}/>
        <InputWithTag name={this.props.name} txt={textRecords[5]} contract={this.state.contract} owner={this.props.owner} value={this.state.email} onChange={this.onEmail}/>
        <CustomRecordAdd name={this.props.name} contract={this.state.contract} />
      </Grid>
    )
  }
}

expt default Records;
